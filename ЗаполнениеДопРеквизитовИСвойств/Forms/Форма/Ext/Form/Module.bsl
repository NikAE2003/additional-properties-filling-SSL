&НаСервере
Процедура ПриОткрытииНаСервере()
	НастроитьСписокДоступныхЗначений();
	ЗаполнитьСписокВыбораВладельцаСвойства();
	НастроитьСписокЗначенийСвойств();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СвойствоПриИзмененииНаСервере()
	НастроитьСписокДоступныхЗначений();
	ЗаполнитьСписокВыбораВладельцаСвойства();
	НастроитьСписокЗначенийСвойств();
КонецПроцедуры

&НаКлиенте
Процедура СвойствоПриИзменении(Элемент)
	СвойствоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокДоступныхЗначений()
	
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Возврат;	
	КонецЕсли;
	
	ДоступныеЗначения.ОсновнаяТаблица = Метаданные.Найтипотипу(Свойство.ТипЗначения.Типы()[0]).ПолноеИмя();
	
	ЭлементыОтбора = ДоступныеЗначения.Отбор.Элементы;
	ОтборПоВладельцу = Неопределено;
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец") Тогда
			ОтборПоВладельцу = ЭлементОтбора;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если Метаданные.НайтиПоПолномуИмени(ДоступныеЗначения.ОсновнаяТаблица).Владельцы.Количество() = 0 Тогда
		Если ОтборПоВладельцу <> Неопределено Тогда
			ЭлементыОтбора.Удалить(ОтборПоВладельцу);
		КонецЕсли;
		Возврат;	
	КонецЕсли;
	
	Если ЭлементОтбора = Неопределено Тогда
		ОтборПоВладельцу = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоВладельцу.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		ОтборПоВладельцу.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Свойство.ВладелецДополнительныхЗначений) Тогда
		ОтборПоВладельцу.ПравоеЗначение = Свойство.ВладелецДополнительныхЗначений;
	Иначе
		ОтборПоВладельцу.ПравоеЗначение = Свойство;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТипыВладельцевСвойства()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Свойство = &Свойство";
	
	Если Свойство.ЭтоДополнительноеСведение Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты", "Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");	
	КонецЕсли;
	
	ТипыВладельцев = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипыВладельцев.Добавить(СтрСоединить(СтрРазделить(Выборка.ИмяПредопределенногоНабора, "_"), "."));
	КонецЦикла;
	
	Возврат ТипыВладельцев;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВладельцаСвойства()
	
	Элементы.ВладелецСвойства.СписокВыбора.Очистить();

	ТипыВладельцев = ТипыВладельцевСвойства();
	
	Если ТипыВладельцев.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	ВладелецСвойства = ТипыВладельцев[0];
	
	Если ТипыВладельцев.Количество() > 1 Тогда
		Для каждого ТипВладельца Из ТипыВладельцев Цикл
			МетаданныеТипа = Метаданные.НайтиПоПолномуИмени(ТипВладельца);
			Представление = МетаданныеТипа.ПредставлениеОбъекта;
			Если Не ЗначениеЗаполнено(Представление) Тогда
				Представление = МетаданныеТипа.Представление();		
			КонецЕсли;
			НовыйЭлементСписка = Элементы.ВладелецСвойства.СписокВыбора.Добавить(ТипВладельца, Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗначенийСвойств()
	
	Если Свойство.ЭтоДополнительноеСведение Тогда
		ШаблонЗапроса = 
			"ВЫБРАТЬ
			|	Объекты.Ссылка КАК Ссылка,
			|	ДополнительныеСведения.Значение КАК Значение
			|ИЗ
			|	%1 КАК Объекты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ПО Объекты.Ссылка = ДополнительныеСведения.Объект
			|			И (ДополнительныеСведения.Свойство = &Свойство)";
	Иначе
		ШаблонЗапроса = 
			"ВЫБРАТЬ
			|	Объекты.Ссылка КАК Ссылка,
			|	ЗначенияДопРеквизитов.Значение КАК Значение
			|ИЗ
			|	%1 КАК Объекты
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1.ДополнительныеРеквизиты КАК ЗначенияДопРеквизитов
			|		ПО (ЗначенияДопРеквизитов.Ссылка = Объекты.Ссылка)
			|			И (ЗначенияДопРеквизитов.Свойство = &Свойство)";
	КонецЕсли;
	
	ЗначенияСвойства.ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ВладелецСвойства);
	ЗначенияСвойства.ОсновнаяТаблица = ВладелецСвойства;
	
	ЗначенияСвойства.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Свойство", Свойство);

КонецПроцедуры

&НаКлиенте
Процедура ВладелецСвойстваПриИзменении(Элемент)
	НастроитьСписокЗначенийСвойств();
КонецПроцедуры

#Область ЗначенияСвойства
&НаКлиенте
Процедура ЗначенияСвойстваНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПеретаскиваетсяЗначениеСвойства = Ложь;
	
	Для каждого ПеретаскиваемыйОбъект Из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(ПеретаскиваемыйОбъект) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НазначаемыеОбъекты.ЗагрузитьЗначения(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияСвойстваПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПеретаскиваетсяЗначениеСвойства Тогда
		Если Строка = Неопределено ИЛИ ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			НазначаемыеОбъекты = Неопределено;
			Возврат;
		КонецЕсли;
		
		НазначаемыеОбъекты.Очистить();
		НазначаемыеОбъекты.Добавить(Строка);
	Иначе
		Если Строка = Неопределено ИЛИ ТипЗнч(Строка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			НазначаемоеСвойство = Неопределено;
			Возврат;
		КонецЕсли;
		
		НазначаемоеСвойство = Строка.Ключ;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияСвойстваПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	НазначитьСвойствоОбъектам();
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияСвойстваОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	НазначаемыеОбъекты.Очистить();
	НазначаемоеСвойство = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область ДоступныеЗначения
&НаКлиенте
Процедура ДоступныеЗначенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПеретаскиваетсяЗначениеСвойства = Истина;
	НазначаемоеСвойство = ПараметрыПеретаскивания.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеЗначенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено ИЛИ ПеретаскиваетсяЗначениеСвойства ИЛИ НЕ ДоступностьПеретаскивания(Строка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Если НЕ ПеретаскиваетсяЗначениеСвойства Тогда
			НазначаемоеСвойство = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НазначаемоеСвойство = Строка;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДоступныеЗначенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	НазначитьСвойствоОбъектам();
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеЗначенияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	НазначаемыеОбъекты.Очистить();
	НазначаемоеСвойство = Неопределено;
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура НазначитьСвойствоОбъектам()

	Объекты = НазначаемыеОбъекты.ВыгрузитьЗначения();
	НазначитьСвойствоОбъектамНаСервере(Объекты, Свойство, НазначаемоеСвойство);
	ОповеститьОбИзменении(Объекты[0]);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НазначитьСвойствоОбъектамНаСервере(Объекты, Свойство, Значение)

	ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
	ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство");
	ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
	
	СтрокаСвойства = ТаблицаСвойствИЗначений.Добавить();
	СтрокаСвойства.Свойство = Свойство;
	СтрокаСвойства.Значение = Значение;
	
	НачатьТранзакцию();
	Попытка
		Если ЗначениеЗаполнено(Значение) Тогда
			Для каждого Объект Из Объекты Цикл
				УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Объект, ТаблицаСвойствИЗначений);
			КонецЦикла;
		Иначе
			Для каждого Объект Из Объекты Цикл
				ОчиститьЗначениеСвойстваНаСервере(Объект, Свойство);	
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьЗначениеСвойстваНаСервере(СсылкаНаОбъект, Свойство)

	ЭтоДопСведение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Свойство, "ЭтоДополнительноеСведение");
	
	Если ЭтоДопСведение Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДополнительныеСведения");
		ЭлементБлокировки.УстановитьЗначение("Объект", СсылкаНаОбъект);
		ЭлементБлокировки.УстановитьЗначение("Свойство", Свойство);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство);
		НаборЗаписей.Записать(Истина);
		
	Иначе 
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СсылкаНаОбъект.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
		Блокировка.Заблокировать();
		
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
		
		ДополнительныеРеквизиты = Объект.ДополнительныеРеквизиты;
		
		УдаляемаяСтрока = Неопределено;
		Для каждого СтрокаДополнительногоРеквизита Из ДополнительныеРеквизиты Цикл
			Если СтрокаДополнительногоРеквизита.Свойство = Свойство Тогда
				УдаляемаяСтрока = СтрокаДополнительногоРеквизита;
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		
		Если УдаляемаяСтрока <> Неопределено Тогда
			ДополнительныеРеквизиты.Удалить(ДополнительныеРеквизиты.Индекс(УдаляемаяСтрока));
		КонецЕсли;
		
		Объект.Записать();
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступностьПеретаскивания(Строка)

	Попытка
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка, "ЭтоГруппа");
		Если ЭтоГруппа Тогда
			Возврат ложь;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ОчиститьЗначениеСвойства(Команда)
	
	Объекты = Элементы.ЗначенияСвойства.ВыделенныеСтроки;
	НазначитьСвойствоОбъектамНаСервере(Объекты, Свойство, Неопределено);
	ОповеститьОбИзменении(Объекты[0]);
	
КонецПроцедуры









